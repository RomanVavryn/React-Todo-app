{"version":3,"sources":["components/add-input-task/index.js","components/add-input-task/add-input-tasks.js","components/todo-item/todo-item.js","components/todo-item/index.js","components/todo-list/todo-list.js","components/todo-list/index.js","components/app/index.js","components/app/app.js","serviceWorker.js","index.js"],"names":["AddInputTasks","state","taksText","hendlChangeTask","e","setState","target","value","addHendl","event","key","length","props","addNewTask","textToNull","this","className","disabled","taskCount","onChange","onKeyPress","onClick","Component","TodoItem","task","done","type","checked","TaskDone","DeleteTask","id","TodoList","todos","map","item","App","text","import","obj","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcb17d48.chunk.js","sourcesContent":["import AddInputTasks from './add-input-tasks';\r\n\r\nexport default AddInputTasks;","import React, { Component } from 'react';\r\nimport './add-input-tasks.css';\r\n\r\nexport default class AddInputTasks extends Component {\r\n    state = {\r\n        taksText: ''\r\n    }\r\n\r\n    // change text in input \r\n    hendlChangeTask = (e) => {\r\n        this.setState({ taksText: e.target.value })\r\n    }\r\n\r\n    // when press Enter, call add task method\r\n    addHendl = (event) => {\r\n        if (event.key === 'Enter') {\r\n            // task length validation \r\n            if (this.state.taksText.length < 4) {\r\n                return;\r\n            }\r\n\r\n            this.props.addNewTask(this.state.taksText)\r\n            // reset input when task added\r\n            this.setState({taksText: ''})\r\n        }\r\n    }\r\n\r\n    // reset input when task added\r\n    textToNull = () => {\r\n        this.setState({taksText: ''})\r\n    }\r\n\r\n\r\n    render() {\r\n        const { taksText } = this.state;\r\n        const { addNewTask } = this.props;\r\n\r\n        return (\r\n            <div className='input-container'>\r\n                <input value={taksText} disabled={this.props.taskCount > 14} onChange={this.hendlChangeTask} onKeyPress={this.addHendl} className='input-task' />\r\n                <button className='addBtn' disabled={this.state.taksText.length < 4} onClick={() => {addNewTask(taksText); this.textToNull();}}> + </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './todo-item.css';\r\n\r\nfunction TodoItem(props) {\r\n    return (\r\n        <li className='todo-item'>\r\n            {/* task text */}\r\n            {props.task.done ? <span className='task-text-done'>{props.task.task}</span> : <span className='task-text'>{props.task.task}</span>}\r\n            {/* done btn */}\r\n            <label className='taks-is-done'>\r\n                <input type='checkbox' checked={props.task.done} onChange={() => props.TaskDone(props.task)} />\r\n                {props.task.done ? <span className='taks-is-done-icon'> &#9745; </span> : <span className='taks-is-done-icon'> &#9744; </span>}\r\n            </label>\r\n            {/* delete btn */}\r\n            <button className='taks-delete' onClick={() => props.DeleteTask(props.task.id)} > &#9746; <span className='dellBtn'>&#9746;</span></button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default TodoItem;","import TodoItem from './todo-item';\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from '../todo-item';\r\nimport './todo-list.css';\r\n\r\n\r\nfunction TodoList(props) {\r\n    return (\r\n        <ul className='todo-list'>\r\n            {props.todos.map(item => (\r\n                <TodoItem key={item.id} task={item} TaskDone={props.TaskDone} DeleteTask={props.DeleteTask} />\r\n            ))}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import TodoList from './todo-list';\r\n\r\nexport default TodoList;","import App from './app';\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport './app.css';\r\n\r\n// components \r\nimport AddInputTasks from '../add-input-task';\r\nimport TodoList from '../todo-list';\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        todos: [],\r\n    }\r\n\r\n    // unique id for task\r\n    id = 0;\r\n    // add task method\r\n    addNewTask = (text) => {\r\n    \r\n        let task = {\r\n            task: text,\r\n            done: false,\r\n            import: false,\r\n            id: this.id,\r\n        }\r\n        this.setState({ todos: [...this.state.todos, task] })\r\n        this.id++;\r\n    }\r\n\r\n    // task change state to done\r\n    TaskDone = (item) => {\r\n        this.setState(state => {\r\n            const list = state.todos.map((obj) => {\r\n                if (obj.id === item.id) {\r\n                    obj.done = !obj.done;\r\n                }\r\n                return obj;\r\n            });\r\n            return {\r\n                todos: list,\r\n            };\r\n        });\r\n    };\r\n\r\n    // delete task\r\n    DeleteTask = (id) => {\r\n        this.setState(state => {\r\n            // find task with same id\r\n            const list = state.todos.filter(item => item.id !== id);\r\n            return {\r\n                todos: list,\r\n            };\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <AddInputTasks addNewTask={this.addNewTask} taskCount={this.state.todos.length} />\r\n                <TodoList todos={this.state.todos} TaskDone={this.TaskDone} DeleteTask={this.DeleteTask} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}